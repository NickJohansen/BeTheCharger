
main.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000a82  00000b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800152  00800152  00000b68  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00001a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001010  00000000  00000000  00001aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006b0  00000000  00000000  00002ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000080b  00000000  00000000  00003161  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000238  00000000  00000000  0000396c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003fe  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a8d  00000000  00000000  00003fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00004a2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_18>
  4c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_19>
  50:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 39       	cpi	r26, 0x93	; 147
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
  9e:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FifoDataLength>:
    char buffer[FIFO_SIZE]; /* fifo ring buffer */
}; 

typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  a6:	fc 01       	movw	r30, r24
  if(fifo->write > fifo->read)
  a8:	82 81       	ldd	r24, Z+2	; 0x02
  aa:	91 81       	ldd	r25, Z+1	; 0x01
  ac:	98 17       	cp	r25, r24
  ae:	38 f0       	brcs	.+14     	; 0xbe <FifoDataLength+0x18>
    return((fifo->write - fifo->read - 1));
  else if(fifo->write < fifo->read)
  b0:	89 17       	cp	r24, r25
  b2:	10 f0       	brcs	.+4      	; 0xb8 <FifoDataLength+0x12>
    return ((FIFO_SIZE + fifo->write - fifo->read - 1));
  else
    return (FIFO_SIZE);
  b4:	80 e8       	ldi	r24, 0x80	; 128
  return ((fifo->write - fifo->read) & (fifo->size - 1));
}
  b6:	08 95       	ret

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
    return((fifo->write - fifo->read - 1));
  else if(fifo->write < fifo->read)
    return ((FIFO_SIZE + fifo->write - fifo->read - 1));
  b8:	81 58       	subi	r24, 0x81	; 129
  ba:	89 1b       	sub	r24, r25
  bc:	08 95       	ret

typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
    return((fifo->write - fifo->read - 1));
  be:	81 50       	subi	r24, 0x01	; 1
  c0:	89 1b       	sub	r24, r25
  c2:	08 95       	ret

000000c4 <FifoWrite>:
  else
    return (FIFO_SIZE);
  return ((fifo->write - fifo->read) & (fifo->size - 1));
}

uint8_t FifoWrite (fifos *fifo, unsigned char data){
  c4:	fc 01       	movw	r30, r24
}; 

typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
  c6:	82 81       	ldd	r24, Z+2	; 0x02
  c8:	91 81       	ldd	r25, Z+1	; 0x01
  ca:	98 17       	cp	r25, r24
  cc:	80 f4       	brcc	.+32     	; 0xee <FifoWrite+0x2a>
    return((fifo->write - fifo->read - 1));
  ce:	28 2f       	mov	r18, r24
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	29 1b       	sub	r18, r25
  return ((fifo->write - fifo->read) & (fifo->size - 1));
}

uint8_t FifoWrite (fifos *fifo, unsigned char data){
    // fifo full : error
    if (FifoDataLength(fifo) == FIFO_SIZE){
  d4:	20 38       	cpi	r18, 0x80	; 128
  d6:	a1 f0       	breq	.+40     	; 0x100 <FifoWrite+0x3c>
        return 1;
    }
    // write data & increment write pointer
    fifo->buffer[fifo->write] = data;
  d8:	df 01       	movw	r26, r30
  da:	a8 0f       	add	r26, r24
  dc:	b1 1d       	adc	r27, r1
  de:	13 96       	adiw	r26, 0x03	; 3
  e0:	6c 93       	st	X, r22
    fifo->write = (fifo->write + 1);
  e2:	8f 5f       	subi	r24, 0xFF	; 255
    if(fifo->write == FIFO_SIZE){
  e4:	80 38       	cpi	r24, 0x80	; 128
  e6:	49 f0       	breq	.+18     	; 0xfa <FifoWrite+0x36>
    if (FifoDataLength(fifo) == FIFO_SIZE){
        return 1;
    }
    // write data & increment write pointer
    fifo->buffer[fifo->write] = data;
    fifo->write = (fifo->write + 1);
  e8:	82 83       	std	Z+2, r24	; 0x02
    if(fifo->write == FIFO_SIZE){
      fifo->write = 0;
    }
    return 0;
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret
typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
    return((fifo->write - fifo->read - 1));
  else if(fifo->write < fifo->read)
  ee:	89 17       	cp	r24, r25
  f0:	38 f4       	brcc	.+14     	; 0x100 <FifoWrite+0x3c>
    return ((FIFO_SIZE + fifo->write - fifo->read - 1));
  f2:	28 2f       	mov	r18, r24
  f4:	21 58       	subi	r18, 0x81	; 129
  f6:	29 1b       	sub	r18, r25
  f8:	ed cf       	rjmp	.-38     	; 0xd4 <FifoWrite+0x10>
    }
    // write data & increment write pointer
    fifo->buffer[fifo->write] = data;
    fifo->write = (fifo->write + 1);
    if(fifo->write == FIFO_SIZE){
      fifo->write = 0;
  fa:	12 82       	std	Z+2, r1	; 0x02
    }
    return 0;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret
}

uint8_t FifoWrite (fifos *fifo, unsigned char data){
    // fifo full : error
    if (FifoDataLength(fifo) == FIFO_SIZE){
        return 1;
 100:	81 e0       	ldi	r24, 0x01	; 1
    fifo->write = (fifo->write + 1);
    if(fifo->write == FIFO_SIZE){
      fifo->write = 0;
    }
    return 0;
}
 102:	08 95       	ret

00000104 <FifoRead>:


uint8_t FifoRead (fifos *fifo, unsigned char *data){
 104:	fc 01       	movw	r30, r24
}; 

typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
 106:	92 81       	ldd	r25, Z+2	; 0x02
 108:	81 81       	ldd	r24, Z+1	; 0x01
 10a:	89 17       	cp	r24, r25
 10c:	90 f4       	brcc	.+36     	; 0x132 <FifoRead+0x2e>
    return((fifo->write - fifo->read - 1));
 10e:	91 50       	subi	r25, 0x01	; 1
 110:	98 1b       	sub	r25, r24
}


uint8_t FifoRead (fifos *fifo, unsigned char *data){
    // fifo empty : error
    if (FifoDataLength(fifo) == FIFO_SIZE){
 112:	90 38       	cpi	r25, 0x80	; 128
 114:	b1 f0       	breq	.+44     	; 0x142 <FifoRead+0x3e>
        return 1;
    }
    // read data & increment read pointer
    *data = fifo->buffer[fifo->read];
 116:	df 01       	movw	r26, r30
 118:	a8 0f       	add	r26, r24
 11a:	b1 1d       	adc	r27, r1
 11c:	13 96       	adiw	r26, 0x03	; 3
 11e:	8c 91       	ld	r24, X
 120:	db 01       	movw	r26, r22
 122:	8c 93       	st	X, r24
    fifo->read = (fifo->read + 1);
 124:	81 81       	ldd	r24, Z+1	; 0x01
 126:	8f 5f       	subi	r24, 0xFF	; 255
    if(fifo->read == FIFO_SIZE){
 128:	80 38       	cpi	r24, 0x80	; 128
 12a:	41 f0       	breq	.+16     	; 0x13c <FifoRead+0x38>
    if (FifoDataLength(fifo) == FIFO_SIZE){
        return 1;
    }
    // read data & increment read pointer
    *data = fifo->buffer[fifo->read];
    fifo->read = (fifo->read + 1);
 12c:	81 83       	std	Z+1, r24	; 0x01
    if(fifo->read == FIFO_SIZE){
      fifo->read = 0;
    }
    return 0;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
    return((fifo->write - fifo->read - 1));
  else if(fifo->write < fifo->read)
 132:	98 17       	cp	r25, r24
 134:	30 f4       	brcc	.+12     	; 0x142 <FifoRead+0x3e>
    return ((FIFO_SIZE + fifo->write - fifo->read - 1));
 136:	91 58       	subi	r25, 0x81	; 129
 138:	98 1b       	sub	r25, r24
 13a:	eb cf       	rjmp	.-42     	; 0x112 <FifoRead+0xe>
    }
    // read data & increment read pointer
    *data = fifo->buffer[fifo->read];
    fifo->read = (fifo->read + 1);
    if(fifo->read == FIFO_SIZE){
      fifo->read = 0;
 13c:	11 82       	std	Z+1, r1	; 0x01
    }
    return 0;
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret


uint8_t FifoRead (fifos *fifo, unsigned char *data){
    // fifo empty : error
    if (FifoDataLength(fifo) == FIFO_SIZE){
        return 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
    fifo->read = (fifo->read + 1);
    if(fifo->read == FIFO_SIZE){
      fifo->read = 0;
    }
    return 0;
}
 144:	08 95       	ret

00000146 <fill>:

void fill(fifos *fifo, char message[50]){
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	dc 01       	movw	r26, r24
 int j = 0;
  while(j<size_array){
 14c:	80 91 90 01 	lds	r24, 0x0190
 150:	90 91 91 01 	lds	r25, 0x0191
 154:	18 16       	cp	r1, r24
 156:	19 06       	cpc	r1, r25
 158:	94 f4       	brge	.+36     	; 0x17e <fill+0x38>
 15a:	12 96       	adiw	r26, 0x02	; 2
 15c:	2c 91       	ld	r18, X
 15e:	12 97       	sbiw	r26, 0x02	; 2
 160:	fb 01       	movw	r30, r22
      fifo->read = 0;
    }
    return 0;
}

void fill(fifos *fifo, char message[50]){
 162:	86 0f       	add	r24, r22
 164:	97 1f       	adc	r25, r23
 int j = 0;
  while(j<size_array){
    fifo->buffer[fifo->write] = message[j];
 166:	31 91       	ld	r19, Z+
 168:	ed 01       	movw	r28, r26
 16a:	c2 0f       	add	r28, r18
 16c:	d1 1d       	adc	r29, r1
 16e:	3b 83       	std	Y+3, r19	; 0x03
    fifo->write = fifo->write + 1;
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	12 96       	adiw	r26, 0x02	; 2
 174:	2c 93       	st	X, r18
 176:	12 97       	sbiw	r26, 0x02	; 2
    return 0;
}

void fill(fifos *fifo, char message[50]){
 int j = 0;
  while(j<size_array){
 178:	e8 17       	cp	r30, r24
 17a:	f9 07       	cpc	r31, r25
 17c:	a1 f7       	brne	.-24     	; 0x166 <fill+0x20>
    fifo->buffer[fifo->write] = message[j];
    fifo->write = fifo->write + 1;
    j++;
  }
} 
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <USART_Transmit>:

void USART_Transmit(unsigned int data ){
/* Wait for empty transmit buffer */
while (!(UCSR0A&(1<<UDRE0)));
 184:	90 91 c0 00 	lds	r25, 0x00C0
 188:	95 ff       	sbrs	r25, 5
 18a:	fc cf       	rjmp	.-8      	; 0x184 <USART_Transmit>

/* Put data into buffer, sends the data */
UDR0 = data;
 18c:	80 93 c6 00 	sts	0x00C6, r24
 190:	08 95       	ret

00000192 <USART_Init>:
}

void USART_Init( unsigned int ubrr){
/*Set baud rate */
  UBRR0H = (unsigned char)(ubrr>>8);
 192:	90 93 c5 00 	sts	0x00C5, r25
  UBRR0L = (unsigned char)ubrr;
 196:	80 93 c4 00 	sts	0x00C4, r24
  /*Enable receiver and transmitter */
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	80 93 c1 00 	sts	0x00C1, r24
  /* Set frame format: 8data, 2stop bit */
  UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 1a0:	8e e0       	ldi	r24, 0x0E	; 14
 1a2:	80 93 c2 00 	sts	0x00C2, r24
 1a6:	08 95       	ret

000001a8 <setLEDs>:

//********************************************************//
//                
//********************************************************//
void setLEDs(int value){
    PORTD |= (0b11100000);
 1a8:	2b b1       	in	r18, 0x0b	; 11
 1aa:	20 6e       	ori	r18, 0xE0	; 224
 1ac:	2b b9       	out	0x0b, r18	; 11
    PORTB |= (0b00000001);
 1ae:	28 9a       	sbi	0x05, 0	; 5
    if (value == 0){
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	99 f0       	breq	.+38     	; 0x1da <setLEDs+0x32>
      PORTD &= ~(0b11100000);
      PORTB &= ~(0b00000001);
    } else if (value < 10) {
 1b4:	8a 30       	cpi	r24, 0x0A	; 10
 1b6:	91 05       	cpc	r25, r1
 1b8:	5c f0       	brlt	.+22     	; 0x1d0 <setLEDs+0x28>
      PORTD &= ~(0b11000000);
      PORTB &= ~(0b00000001);
    } else if (value < 50) {
 1ba:	82 33       	cpi	r24, 0x32	; 50
 1bc:	91 05       	cpc	r25, r1
 1be:	b4 f0       	brlt	.+44     	; 0x1ec <setLEDs+0x44>
      PORTD &= ~(0b10000000);
      PORTB &= ~(0b00000001);
    } else if (value < 90) {
 1c0:	8a 35       	cpi	r24, 0x5A	; 90
 1c2:	91 05       	cpc	r25, r1
 1c4:	7c f0       	brlt	.+30     	; 0x1e4 <setLEDs+0x3c>
      PORTD &= ~(0b00000000);
      PORTB &= ~(0b00000001);
    } else {
      PORTD &= ~(0b00000000);
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	8b b9       	out	0x0b, r24	; 11
      PORTB &= ~(0b00000000);
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	85 b9       	out	0x05, r24	; 5
 1ce:	08 95       	ret
    PORTB |= (0b00000001);
    if (value == 0){
      PORTD &= ~(0b11100000);
      PORTB &= ~(0b00000001);
    } else if (value < 10) {
      PORTD &= ~(0b11000000);
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	8f 73       	andi	r24, 0x3F	; 63
 1d4:	8b b9       	out	0x0b, r24	; 11
      PORTB &= ~(0b00000001);
 1d6:	28 98       	cbi	0x05, 0	; 5
 1d8:	08 95       	ret
//********************************************************//
void setLEDs(int value){
    PORTD |= (0b11100000);
    PORTB |= (0b00000001);
    if (value == 0){
      PORTD &= ~(0b11100000);
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8f 71       	andi	r24, 0x1F	; 31
 1de:	8b b9       	out	0x0b, r24	; 11
      PORTB &= ~(0b00000001);
 1e0:	28 98       	cbi	0x05, 0	; 5
 1e2:	08 95       	ret
      PORTB &= ~(0b00000001);
    } else if (value < 50) {
      PORTD &= ~(0b10000000);
      PORTB &= ~(0b00000001);
    } else if (value < 90) {
      PORTD &= ~(0b00000000);
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	8b b9       	out	0x0b, r24	; 11
      PORTB &= ~(0b00000001);
 1e8:	28 98       	cbi	0x05, 0	; 5
 1ea:	08 95       	ret
      PORTB &= ~(0b00000001);
    } else if (value < 10) {
      PORTD &= ~(0b11000000);
      PORTB &= ~(0b00000001);
    } else if (value < 50) {
      PORTD &= ~(0b10000000);
 1ec:	5f 98       	cbi	0x0b, 7	; 11
      PORTB &= ~(0b00000001);
 1ee:	28 98       	cbi	0x05, 0	; 5
 1f0:	08 95       	ret

000001f2 <__vector_18>:
      PORTD &= ~(0b00000000);
      PORTB &= ~(0b00000000);
    }
}

ISR(USART_RX_vect){//RX complete
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1

}
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_20>:
ISR(USART_TX_vect){//TX complete
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1

}
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_19>:
ISR(USART_UDRE_vect){//Data register empty
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1

}
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_5>:
ISR(PCINT2_vect){
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	c6 5b       	subi	r28, 0xB6	; 182
 262:	d1 09       	sbc	r29, r1
 264:	de bf       	out	0x3e, r29	; 62
 266:	cd bf       	out	0x3d, r28	; 61
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t i;
  for (i = 0; i<101; i++){
			setLEDs(i);
 26c:	c8 01       	movw	r24, r16
 26e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <setLEDs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	97 e2       	ldi	r25, 0x27	; 39
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <__vector_5+0x48>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <__vector_5+0x4e>
 27c:	00 00       	nop
 27e:	0f 5f       	subi	r16, 0xFF	; 255
 280:	1f 4f       	sbci	r17, 0xFF	; 255
ISR(USART_UDRE_vect){//Data register empty

}
ISR(PCINT2_vect){
  uint8_t i;
  for (i = 0; i<101; i++){
 282:	05 36       	cpi	r16, 0x65	; 101
 284:	11 05       	cpc	r17, r1
 286:	91 f7       	brne	.-28     	; 0x26c <__vector_5+0x3e>
			setLEDs(i);
			_delay_ms(5);
		  }

  if ((PIND & (1<<3)) == (1<<3)){
 288:	4b 99       	sbic	0x09, 3	; 9
 28a:	29 c0       	rjmp	.+82     	; 0x2de <__vector_5+0xb0>
        USART_Transmit(data);
      }
    }
  }

  if ((PIND & (1<<2)) == (1<<2)){
 28c:	4a 9b       	sbis	0x09, 2	; 9
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <__vector_5+0x74>
    charge++;
 290:	80 91 52 01 	lds	r24, 0x0152
 294:	90 91 53 01 	lds	r25, 0x0153
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	90 93 53 01 	sts	0x0153, r25
 29e:	80 93 52 01 	sts	0x0152, r24
  }
}
 2a2:	ca 54       	subi	r28, 0x4A	; 74
 2a4:	df 4f       	sbci	r29, 0xFF	; 255
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti
			setLEDs(i);
			_delay_ms(5);
		  }

  if ((PIND & (1<<3)) == (1<<3)){
    fifos fifo = {.read = 0, .write = 1};
 2de:	8e 01       	movw	r16, r28
 2e0:	0f 5f       	subi	r16, 0xFF	; 255
 2e2:	1f 4f       	sbci	r17, 0xFF	; 255
 2e4:	83 e8       	ldi	r24, 0x83	; 131
 2e6:	f8 01       	movw	r30, r16
 2e8:	11 92       	st	Z+, r1
 2ea:	8a 95       	dec	r24
 2ec:	e9 f7       	brne	.-6      	; 0x2e8 <__vector_5+0xba>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	8b 83       	std	Y+3, r24	; 0x03
    unsigned char data;
    char to_user[50];
    memset(to_user, '\0', sizeof(to_user)); 
 2f2:	7e 01       	movw	r14, r28
 2f4:	f4 e8       	ldi	r31, 0x84	; 132
 2f6:	ef 0e       	add	r14, r31
 2f8:	f1 1c       	adc	r15, r1
 2fa:	82 e3       	ldi	r24, 0x32	; 50
 2fc:	f7 01       	movw	r30, r14
 2fe:	11 92       	st	Z+, r1
 300:	8a 95       	dec	r24
 302:	e9 f7       	brne	.-6      	; 0x2fe <__vector_5+0xd0>
    sprintf(to_user, "%s%d\n", number_of_ticks,charge);
 304:	80 91 53 01 	lds	r24, 0x0153
 308:	8f 93       	push	r24
 30a:	80 91 52 01 	lds	r24, 0x0152
 30e:	8f 93       	push	r24
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	8c e4       	ldi	r24, 0x4C	; 76
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	9f 93       	push	r25
 31e:	8f 93       	push	r24
 320:	ff 92       	push	r15
 322:	ef 92       	push	r14
 324:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <sprintf>
    size_array = sizeof(to_user);
 328:	82 e3       	ldi	r24, 0x32	; 50
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	90 93 91 01 	sts	0x0191, r25
 330:	80 93 90 01 	sts	0x0190, r24
 334:	3b 81       	ldd	r19, Y+3	; 0x03
    fill(&fifo,to_user);
 336:	f7 01       	movw	r30, r14

}
ISR(USART_UDRE_vect){//Data register empty

}
ISR(PCINT2_vect){
 338:	c7 01       	movw	r24, r14
 33a:	c2 96       	adiw	r24, 0x32	; 50
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	23 2f       	mov	r18, r19
}

void fill(fifos *fifo, char message[50]){
 int j = 0;
  while(j<size_array){
    fifo->buffer[fifo->write] = message[j];
 348:	41 91       	ld	r20, Z+
 34a:	a4 e0       	ldi	r26, 0x04	; 4
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	ac 0f       	add	r26, r28
 350:	bd 1f       	adc	r27, r29
 352:	a2 0f       	add	r26, r18
 354:	b1 1d       	adc	r27, r1
 356:	4c 93       	st	X, r20
 358:	2f 5f       	subi	r18, 0xFF	; 255
    return 0;
}

void fill(fifos *fifo, char message[50]){
 int j = 0;
  while(j<size_array){
 35a:	e8 17       	cp	r30, r24
 35c:	f9 07       	cpc	r31, r25
 35e:	a1 f7       	brne	.-24     	; 0x348 <__vector_5+0x11a>
 360:	83 2f       	mov	r24, r19
 362:	8e 5c       	subi	r24, 0xCE	; 206
 364:	8b 83       	std	Y+3, r24	; 0x03

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
    return((fifo->write - fifo->read - 1));
  else if(fifo->write < fifo->read)
    return ((FIFO_SIZE + fifo->write - fifo->read - 1));
 366:	9f e7       	ldi	r25, 0x7F	; 127
 368:	f9 2e       	mov	r15, r25
 36a:	9a 81       	ldd	r25, Y+2	; 0x02

typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
    return((fifo->write - fifo->read - 1));
 36c:	39 2f       	mov	r19, r25
 36e:	30 95       	com	r19
 370:	38 0f       	add	r19, r24
  else if(fifo->write < fifo->read)
    return ((FIFO_SIZE + fifo->write - fifo->read - 1));
 372:	2f 2d       	mov	r18, r15
 374:	29 1b       	sub	r18, r25
 376:	28 0f       	add	r18, r24
 378:	98 17       	cp	r25, r24
 37a:	08 f4       	brcc	.+2      	; 0x37e <__vector_5+0x150>
 37c:	23 2f       	mov	r18, r19
}; 

typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
 37e:	98 17       	cp	r25, r24
 380:	a8 f0       	brcs	.+42     	; 0x3ac <__vector_5+0x17e>
    return((fifo->write - fifo->read - 1));
  else if(fifo->write < fifo->read)
 382:	89 17       	cp	r24, r25
 384:	98 f0       	brcs	.+38     	; 0x3ac <__vector_5+0x17e>
    sprintf(to_user, "%s%d\n", number_of_ticks,charge);
    size_array = sizeof(to_user);
    fill(&fifo,to_user);
    while(1){
    if (FifoDataLength(&fifo) > 0){
        FifoRead(&fifo, &data);
 386:	be 01       	movw	r22, r28
 388:	6a 54       	subi	r22, 0x4A	; 74
 38a:	7f 4f       	sbci	r23, 0xFF	; 255
 38c:	c8 01       	movw	r24, r16
 38e:	0e 94 82 00 	call	0x104	; 0x104 <FifoRead>
        USART_Transmit(data);
 392:	ca 54       	subi	r28, 0x4A	; 74
 394:	df 4f       	sbci	r29, 0xFF	; 255
 396:	98 81       	ld	r25, Y
 398:	c6 5b       	subi	r28, 0xB6	; 182
 39a:	d0 40       	sbci	r29, 0x00	; 0
  }
} 

void USART_Transmit(unsigned int data ){
/* Wait for empty transmit buffer */
while (!(UCSR0A&(1<<UDRE0)));
 39c:	80 91 c0 00 	lds	r24, 0x00C0
 3a0:	85 ff       	sbrs	r24, 5
 3a2:	fc cf       	rjmp	.-8      	; 0x39c <__vector_5+0x16e>

/* Put data into buffer, sends the data */
UDR0 = data;
 3a4:	90 93 c6 00 	sts	0x00C6, r25
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	df cf       	rjmp	.-66     	; 0x36a <__vector_5+0x13c>
    memset(to_user, '\0', sizeof(to_user)); 
    sprintf(to_user, "%s%d\n", number_of_ticks,charge);
    size_array = sizeof(to_user);
    fill(&fifo,to_user);
    while(1){
    if (FifoDataLength(&fifo) > 0){
 3ac:	22 23       	and	r18, r18
 3ae:	39 f3       	breq	.-50     	; 0x37e <__vector_5+0x150>
 3b0:	ea cf       	rjmp	.-44     	; 0x386 <__vector_5+0x158>

000003b2 <main>:


//********************************************************//
//                Main function
//********************************************************//
int main(){
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	c4 58       	subi	r28, 0x84	; 132
 3bc:	d1 09       	sbc	r29, r1
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
	//uint8_t i;
  sei();
 3c8:	78 94       	sei
  EIMSK |= (1 << INT0) | (1 << INT1);
 3ca:	8d b3       	in	r24, 0x1d	; 29
 3cc:	83 60       	ori	r24, 0x03	; 3
 3ce:	8d bb       	out	0x1d, r24	; 29
  EIFR |= (1 << INTF0) | (1 << INTF1);
 3d0:	8c b3       	in	r24, 0x1c	; 28
 3d2:	83 60       	ori	r24, 0x03	; 3
 3d4:	8c bb       	out	0x1c, r24	; 28
  PCMSK2 |= (1 << PCINT18) | (1 << PCINT19);
 3d6:	80 91 6d 00 	lds	r24, 0x006D
 3da:	8c 60       	ori	r24, 0x0C	; 12
 3dc:	80 93 6d 00 	sts	0x006D, r24
  PCICR |= (1 << PCIE2);
 3e0:	80 91 68 00 	lds	r24, 0x0068
 3e4:	84 60       	ori	r24, 0x04	; 4
 3e6:	80 93 68 00 	sts	0x0068, r24
  PCIFR |= (1 << PCIF2);
 3ea:	da 9a       	sbi	0x1b, 2	; 27
  unsigned char data;
  fifos tmit_fifo = {.read = 0, .write = 1};
 3ec:	8e 01       	movw	r16, r28
 3ee:	0f 5f       	subi	r16, 0xFF	; 255
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
 3f2:	83 e8       	ldi	r24, 0x83	; 131
 3f4:	d8 01       	movw	r26, r16
 3f6:	1d 92       	st	X+, r1
 3f8:	8a 95       	dec	r24
 3fa:	e9 f7       	brne	.-6      	; 0x3f6 <main+0x44>
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	8b 83       	std	Y+3, r24	; 0x03
  fifos recv_fifo = {.read = 0, .write = 1};
	
  int percentage = 99;
  memset(message, '\0', sizeof(message)); 
 400:	ee e5       	ldi	r30, 0x5E	; 94
 402:	f1 e0       	ldi	r31, 0x01	; 1
 404:	82 e3       	ldi	r24, 0x32	; 50
 406:	df 01       	movw	r26, r30
 408:	1d 92       	st	X+, r1
 40a:	8a 95       	dec	r24
 40c:	e9 f7       	brne	.-6      	; 0x408 <main+0x56>
  sprintf(message, "%s%d\n", total_percent,percentage);
 40e:	1f 92       	push	r1
 410:	83 e6       	ldi	r24, 0x63	; 99
 412:	8f 93       	push	r24
 414:	82 e2       	ldi	r24, 0x22	; 34
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	9f 93       	push	r25
 41a:	8f 93       	push	r24
 41c:	8c e4       	ldi	r24, 0x4C	; 76
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	9f 93       	push	r25
 422:	8f 93       	push	r24
 424:	ff 93       	push	r31
 426:	ef 93       	push	r30
 428:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <sprintf>
  size_array = sizeof(message);
 42c:	82 e3       	ldi	r24, 0x32	; 50
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 91 01 	sts	0x0191, r25
 434:	80 93 90 01 	sts	0x0190, r24
 438:	9b 81       	ldd	r25, Y+3	; 0x03
 43a:	ee e5       	ldi	r30, 0x5E	; 94
 43c:	f1 e0       	ldi	r31, 0x01	; 1


//********************************************************//
//                Main function
//********************************************************//
int main(){
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	89 2f       	mov	r24, r25
}

void fill(fifos *fifo, char message[50]){
 int j = 0;
  while(j<size_array){
    fifo->buffer[fifo->write] = message[j];
 44a:	21 91       	ld	r18, Z+
 44c:	a4 e0       	ldi	r26, 0x04	; 4
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	ac 0f       	add	r26, r28
 452:	bd 1f       	adc	r27, r29
 454:	a8 0f       	add	r26, r24
 456:	b1 1d       	adc	r27, r1
 458:	2c 93       	st	X, r18
 45a:	8f 5f       	subi	r24, 0xFF	; 255
    return 0;
}

void fill(fifos *fifo, char message[50]){
 int j = 0;
  while(j<size_array){
 45c:	31 e0       	ldi	r19, 0x01	; 1
 45e:	e0 39       	cpi	r30, 0x90	; 144
 460:	f3 07       	cpc	r31, r19
 462:	99 f7       	brne	.-26     	; 0x44a <main+0x98>
 464:	9e 5c       	subi	r25, 0xCE	; 206
 466:	9b 83       	std	Y+3, r25	; 0x03
  memset(message, '\0', sizeof(message)); 
  sprintf(message, "%s%d\n", total_percent,percentage);
  size_array = sizeof(message);
  fill(&tmit_fifo,message); 

	DDRB |= 0b00000001; //LED
 468:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= 0b11100000;
 46a:	8a b1       	in	r24, 0x0a	; 10
 46c:	80 6e       	ori	r24, 0xE0	; 224
 46e:	8a b9       	out	0x0a, r24	; 10

  PORTD |= 0b11100000;
 470:	8b b1       	in	r24, 0x0b	; 11
 472:	80 6e       	ori	r24, 0xE0	; 224
 474:	8b b9       	out	0x0b, r24	; 11
UDR0 = data;
}

void USART_Init( unsigned int ubrr){
/*Set baud rate */
  UBRR0H = (unsigned char)(ubrr>>8);
 476:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = (unsigned char)ubrr;
 47a:	85 e0       	ldi	r24, 0x05	; 5
 47c:	80 93 c4 00 	sts	0x00C4, r24
  /*Enable receiver and transmitter */
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 480:	88 e1       	ldi	r24, 0x18	; 24
 482:	80 93 c1 00 	sts	0x00C1, r24
  /* Set frame format: 8data, 2stop bit */
  UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 486:	8e e0       	ldi	r24, 0x0E	; 14
 488:	80 93 c2 00 	sts	0x00C2, r24
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	9a 81       	ldd	r25, Y+2	; 0x02

typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
    return((fifo->write - fifo->read - 1));
 490:	38 2f       	mov	r19, r24
 492:	31 50       	subi	r19, 0x01	; 1
 494:	39 1b       	sub	r19, r25
  else if(fifo->write < fifo->read)
    return ((FIFO_SIZE + fifo->write - fifo->read - 1));
 496:	28 2f       	mov	r18, r24
 498:	21 58       	subi	r18, 0x81	; 129
 49a:	29 1b       	sub	r18, r25
 49c:	98 17       	cp	r25, r24
 49e:	08 f4       	brcc	.+2      	; 0x4a2 <main+0xf0>
 4a0:	23 2f       	mov	r18, r19
}; 

typedef struct fifo_struct fifos;

uint8_t FifoDataLength (fifos *fifo){
  if(fifo->write > fifo->read)
 4a2:	98 17       	cp	r25, r24
 4a4:	a0 f0       	brcs	.+40     	; 0x4ce <main+0x11c>
    return((fifo->write - fifo->read - 1));
  else if(fifo->write < fifo->read)
 4a6:	89 17       	cp	r24, r25
 4a8:	90 f0       	brcs	.+36     	; 0x4ce <main+0x11c>

  USART_Init(MYUBRR);

    while (1) {
      if (FifoDataLength(&tmit_fifo) > 0){
        FifoRead(&tmit_fifo, &data);
 4aa:	be 01       	movw	r22, r28
 4ac:	6c 57       	subi	r22, 0x7C	; 124
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	c8 01       	movw	r24, r16
 4b2:	0e 94 82 00 	call	0x104	; 0x104 <FifoRead>
        USART_Transmit(data);
 4b6:	cc 57       	subi	r28, 0x7C	; 124
 4b8:	df 4f       	sbci	r29, 0xFF	; 255
 4ba:	98 81       	ld	r25, Y
 4bc:	c4 58       	subi	r28, 0x84	; 132
 4be:	d0 40       	sbci	r29, 0x00	; 0
  }
} 

void USART_Transmit(unsigned int data ){
/* Wait for empty transmit buffer */
while (!(UCSR0A&(1<<UDRE0)));
 4c0:	80 91 c0 00 	lds	r24, 0x00C0
 4c4:	85 ff       	sbrs	r24, 5
 4c6:	fc cf       	rjmp	.-8      	; 0x4c0 <main+0x10e>

/* Put data into buffer, sends the data */
UDR0 = data;
 4c8:	90 93 c6 00 	sts	0x00C6, r25
 4cc:	df cf       	rjmp	.-66     	; 0x48c <main+0xda>
  PORTD |= 0b11100000;

  USART_Init(MYUBRR);

    while (1) {
      if (FifoDataLength(&tmit_fifo) > 0){
 4ce:	22 23       	and	r18, r18
 4d0:	41 f3       	breq	.-48     	; 0x4a2 <main+0xf0>
 4d2:	eb cf       	rjmp	.-42     	; 0x4aa <main+0xf8>

000004d4 <sprintf>:
 4d4:	ae e0       	ldi	r26, 0x0E	; 14
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e0 e7       	ldi	r30, 0x70	; 112
 4da:	f2 e0       	ldi	r31, 0x02	; 2
 4dc:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__prologue_saves__+0x1c>
 4e0:	0d 89       	ldd	r16, Y+21	; 0x15
 4e2:	1e 89       	ldd	r17, Y+22	; 0x16
 4e4:	86 e0       	ldi	r24, 0x06	; 6
 4e6:	8c 83       	std	Y+4, r24	; 0x04
 4e8:	1a 83       	std	Y+2, r17	; 0x02
 4ea:	09 83       	std	Y+1, r16	; 0x01
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	9f e7       	ldi	r25, 0x7F	; 127
 4f0:	9e 83       	std	Y+6, r25	; 0x06
 4f2:	8d 83       	std	Y+5, r24	; 0x05
 4f4:	ce 01       	movw	r24, r28
 4f6:	49 96       	adiw	r24, 0x19	; 25
 4f8:	ac 01       	movw	r20, r24
 4fa:	6f 89       	ldd	r22, Y+23	; 0x17
 4fc:	78 8d       	ldd	r23, Y+24	; 0x18
 4fe:	ce 01       	movw	r24, r28
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	0e 94 8c 02 	call	0x518	; 0x518 <vfprintf>
 506:	ef 81       	ldd	r30, Y+7	; 0x07
 508:	f8 85       	ldd	r31, Y+8	; 0x08
 50a:	e0 0f       	add	r30, r16
 50c:	f1 1f       	adc	r31, r17
 50e:	10 82       	st	Z, r1
 510:	2e 96       	adiw	r28, 0x0e	; 14
 512:	e4 e0       	ldi	r30, 0x04	; 4
 514:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__epilogue_restores__+0x1c>

00000518 <vfprintf>:
 518:	ac e0       	ldi	r26, 0x0C	; 12
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	e2 e9       	ldi	r30, 0x92	; 146
 51e:	f2 e0       	ldi	r31, 0x02	; 2
 520:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__prologue_saves__>
 524:	7c 01       	movw	r14, r24
 526:	6b 01       	movw	r12, r22
 528:	8a 01       	movw	r16, r20
 52a:	fc 01       	movw	r30, r24
 52c:	17 82       	std	Z+7, r1	; 0x07
 52e:	16 82       	std	Z+6, r1	; 0x06
 530:	83 81       	ldd	r24, Z+3	; 0x03
 532:	81 ff       	sbrs	r24, 1
 534:	c6 c1       	rjmp	.+908    	; 0x8c2 <vfprintf+0x3aa>
 536:	88 24       	eor	r8, r8
 538:	83 94       	inc	r8
 53a:	91 2c       	mov	r9, r1
 53c:	8c 0e       	add	r8, r28
 53e:	9d 1e       	adc	r9, r29
 540:	f7 01       	movw	r30, r14
 542:	93 81       	ldd	r25, Z+3	; 0x03
 544:	f6 01       	movw	r30, r12
 546:	93 fd       	sbrc	r25, 3
 548:	85 91       	lpm	r24, Z+
 54a:	93 ff       	sbrs	r25, 3
 54c:	81 91       	ld	r24, Z+
 54e:	6f 01       	movw	r12, r30
 550:	88 23       	and	r24, r24
 552:	09 f4       	brne	.+2      	; 0x556 <vfprintf+0x3e>
 554:	b2 c1       	rjmp	.+868    	; 0x8ba <vfprintf+0x3a2>
 556:	85 32       	cpi	r24, 0x25	; 37
 558:	39 f4       	brne	.+14     	; 0x568 <vfprintf+0x50>
 55a:	93 fd       	sbrc	r25, 3
 55c:	85 91       	lpm	r24, Z+
 55e:	93 ff       	sbrs	r25, 3
 560:	81 91       	ld	r24, Z+
 562:	6f 01       	movw	r12, r30
 564:	85 32       	cpi	r24, 0x25	; 37
 566:	29 f4       	brne	.+10     	; 0x572 <vfprintf+0x5a>
 568:	b7 01       	movw	r22, r14
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 570:	e7 cf       	rjmp	.-50     	; 0x540 <vfprintf+0x28>
 572:	51 2c       	mov	r5, r1
 574:	31 2c       	mov	r3, r1
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	20 32       	cpi	r18, 0x20	; 32
 57a:	a8 f4       	brcc	.+42     	; 0x5a6 <vfprintf+0x8e>
 57c:	8b 32       	cpi	r24, 0x2B	; 43
 57e:	61 f0       	breq	.+24     	; 0x598 <vfprintf+0x80>
 580:	28 f4       	brcc	.+10     	; 0x58c <vfprintf+0x74>
 582:	80 32       	cpi	r24, 0x20	; 32
 584:	51 f0       	breq	.+20     	; 0x59a <vfprintf+0x82>
 586:	83 32       	cpi	r24, 0x23	; 35
 588:	71 f4       	brne	.+28     	; 0x5a6 <vfprintf+0x8e>
 58a:	0b c0       	rjmp	.+22     	; 0x5a2 <vfprintf+0x8a>
 58c:	8d 32       	cpi	r24, 0x2D	; 45
 58e:	39 f0       	breq	.+14     	; 0x59e <vfprintf+0x86>
 590:	80 33       	cpi	r24, 0x30	; 48
 592:	49 f4       	brne	.+18     	; 0x5a6 <vfprintf+0x8e>
 594:	21 60       	ori	r18, 0x01	; 1
 596:	28 c0       	rjmp	.+80     	; 0x5e8 <vfprintf+0xd0>
 598:	22 60       	ori	r18, 0x02	; 2
 59a:	24 60       	ori	r18, 0x04	; 4
 59c:	25 c0       	rjmp	.+74     	; 0x5e8 <vfprintf+0xd0>
 59e:	28 60       	ori	r18, 0x08	; 8
 5a0:	23 c0       	rjmp	.+70     	; 0x5e8 <vfprintf+0xd0>
 5a2:	20 61       	ori	r18, 0x10	; 16
 5a4:	21 c0       	rjmp	.+66     	; 0x5e8 <vfprintf+0xd0>
 5a6:	27 fd       	sbrc	r18, 7
 5a8:	27 c0       	rjmp	.+78     	; 0x5f8 <vfprintf+0xe0>
 5aa:	38 2f       	mov	r19, r24
 5ac:	30 53       	subi	r19, 0x30	; 48
 5ae:	3a 30       	cpi	r19, 0x0A	; 10
 5b0:	78 f4       	brcc	.+30     	; 0x5d0 <vfprintf+0xb8>
 5b2:	26 ff       	sbrs	r18, 6
 5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <vfprintf+0xaa>
 5b6:	fa e0       	ldi	r31, 0x0A	; 10
 5b8:	5f 9e       	mul	r5, r31
 5ba:	30 0d       	add	r19, r0
 5bc:	11 24       	eor	r1, r1
 5be:	53 2e       	mov	r5, r19
 5c0:	13 c0       	rjmp	.+38     	; 0x5e8 <vfprintf+0xd0>
 5c2:	8a e0       	ldi	r24, 0x0A	; 10
 5c4:	38 9e       	mul	r3, r24
 5c6:	30 0d       	add	r19, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	33 2e       	mov	r3, r19
 5cc:	20 62       	ori	r18, 0x20	; 32
 5ce:	0c c0       	rjmp	.+24     	; 0x5e8 <vfprintf+0xd0>
 5d0:	8e 32       	cpi	r24, 0x2E	; 46
 5d2:	21 f4       	brne	.+8      	; 0x5dc <vfprintf+0xc4>
 5d4:	26 fd       	sbrc	r18, 6
 5d6:	71 c1       	rjmp	.+738    	; 0x8ba <vfprintf+0x3a2>
 5d8:	20 64       	ori	r18, 0x40	; 64
 5da:	06 c0       	rjmp	.+12     	; 0x5e8 <vfprintf+0xd0>
 5dc:	8c 36       	cpi	r24, 0x6C	; 108
 5de:	11 f4       	brne	.+4      	; 0x5e4 <vfprintf+0xcc>
 5e0:	20 68       	ori	r18, 0x80	; 128
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <vfprintf+0xd0>
 5e4:	88 36       	cpi	r24, 0x68	; 104
 5e6:	41 f4       	brne	.+16     	; 0x5f8 <vfprintf+0xe0>
 5e8:	f6 01       	movw	r30, r12
 5ea:	93 fd       	sbrc	r25, 3
 5ec:	85 91       	lpm	r24, Z+
 5ee:	93 ff       	sbrs	r25, 3
 5f0:	81 91       	ld	r24, Z+
 5f2:	6f 01       	movw	r12, r30
 5f4:	81 11       	cpse	r24, r1
 5f6:	c0 cf       	rjmp	.-128    	; 0x578 <vfprintf+0x60>
 5f8:	98 2f       	mov	r25, r24
 5fa:	95 54       	subi	r25, 0x45	; 69
 5fc:	93 30       	cpi	r25, 0x03	; 3
 5fe:	18 f0       	brcs	.+6      	; 0x606 <vfprintf+0xee>
 600:	90 52       	subi	r25, 0x20	; 32
 602:	93 30       	cpi	r25, 0x03	; 3
 604:	28 f4       	brcc	.+10     	; 0x610 <vfprintf+0xf8>
 606:	0c 5f       	subi	r16, 0xFC	; 252
 608:	1f 4f       	sbci	r17, 0xFF	; 255
 60a:	ff e3       	ldi	r31, 0x3F	; 63
 60c:	f9 83       	std	Y+1, r31	; 0x01
 60e:	0d c0       	rjmp	.+26     	; 0x62a <vfprintf+0x112>
 610:	83 36       	cpi	r24, 0x63	; 99
 612:	31 f0       	breq	.+12     	; 0x620 <vfprintf+0x108>
 614:	83 37       	cpi	r24, 0x73	; 115
 616:	71 f0       	breq	.+28     	; 0x634 <vfprintf+0x11c>
 618:	83 35       	cpi	r24, 0x53	; 83
 61a:	09 f0       	breq	.+2      	; 0x61e <vfprintf+0x106>
 61c:	5e c0       	rjmp	.+188    	; 0x6da <vfprintf+0x1c2>
 61e:	23 c0       	rjmp	.+70     	; 0x666 <vfprintf+0x14e>
 620:	f8 01       	movw	r30, r16
 622:	80 81       	ld	r24, Z
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	0e 5f       	subi	r16, 0xFE	; 254
 628:	1f 4f       	sbci	r17, 0xFF	; 255
 62a:	44 24       	eor	r4, r4
 62c:	43 94       	inc	r4
 62e:	51 2c       	mov	r5, r1
 630:	54 01       	movw	r10, r8
 632:	15 c0       	rjmp	.+42     	; 0x65e <vfprintf+0x146>
 634:	38 01       	movw	r6, r16
 636:	f2 e0       	ldi	r31, 0x02	; 2
 638:	6f 0e       	add	r6, r31
 63a:	71 1c       	adc	r7, r1
 63c:	f8 01       	movw	r30, r16
 63e:	a0 80       	ld	r10, Z
 640:	b1 80       	ldd	r11, Z+1	; 0x01
 642:	26 ff       	sbrs	r18, 6
 644:	03 c0       	rjmp	.+6      	; 0x64c <vfprintf+0x134>
 646:	65 2d       	mov	r22, r5
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <vfprintf+0x138>
 64c:	6f ef       	ldi	r22, 0xFF	; 255
 64e:	7f ef       	ldi	r23, 0xFF	; 255
 650:	c5 01       	movw	r24, r10
 652:	2c 87       	std	Y+12, r18	; 0x0c
 654:	0e 94 73 04 	call	0x8e6	; 0x8e6 <strnlen>
 658:	2c 01       	movw	r4, r24
 65a:	83 01       	movw	r16, r6
 65c:	2c 85       	ldd	r18, Y+12	; 0x0c
 65e:	6f e7       	ldi	r22, 0x7F	; 127
 660:	26 2e       	mov	r2, r22
 662:	22 22       	and	r2, r18
 664:	18 c0       	rjmp	.+48     	; 0x696 <vfprintf+0x17e>
 666:	38 01       	movw	r6, r16
 668:	f2 e0       	ldi	r31, 0x02	; 2
 66a:	6f 0e       	add	r6, r31
 66c:	71 1c       	adc	r7, r1
 66e:	f8 01       	movw	r30, r16
 670:	a0 80       	ld	r10, Z
 672:	b1 80       	ldd	r11, Z+1	; 0x01
 674:	26 ff       	sbrs	r18, 6
 676:	03 c0       	rjmp	.+6      	; 0x67e <vfprintf+0x166>
 678:	65 2d       	mov	r22, r5
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <vfprintf+0x16a>
 67e:	6f ef       	ldi	r22, 0xFF	; 255
 680:	7f ef       	ldi	r23, 0xFF	; 255
 682:	c5 01       	movw	r24, r10
 684:	2c 87       	std	Y+12, r18	; 0x0c
 686:	0e 94 68 04 	call	0x8d0	; 0x8d0 <strnlen_P>
 68a:	2c 01       	movw	r4, r24
 68c:	2c 85       	ldd	r18, Y+12	; 0x0c
 68e:	50 e8       	ldi	r21, 0x80	; 128
 690:	25 2e       	mov	r2, r21
 692:	22 2a       	or	r2, r18
 694:	83 01       	movw	r16, r6
 696:	23 fc       	sbrc	r2, 3
 698:	1c c0       	rjmp	.+56     	; 0x6d2 <vfprintf+0x1ba>
 69a:	06 c0       	rjmp	.+12     	; 0x6a8 <vfprintf+0x190>
 69c:	b7 01       	movw	r22, r14
 69e:	80 e2       	ldi	r24, 0x20	; 32
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 6a6:	3a 94       	dec	r3
 6a8:	83 2d       	mov	r24, r3
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	48 16       	cp	r4, r24
 6ae:	59 06       	cpc	r5, r25
 6b0:	a8 f3       	brcs	.-22     	; 0x69c <vfprintf+0x184>
 6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <vfprintf+0x1ba>
 6b4:	f5 01       	movw	r30, r10
 6b6:	27 fc       	sbrc	r2, 7
 6b8:	85 91       	lpm	r24, Z+
 6ba:	27 fe       	sbrs	r2, 7
 6bc:	81 91       	ld	r24, Z+
 6be:	5f 01       	movw	r10, r30
 6c0:	b7 01       	movw	r22, r14
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 6c8:	31 10       	cpse	r3, r1
 6ca:	3a 94       	dec	r3
 6cc:	f1 e0       	ldi	r31, 0x01	; 1
 6ce:	4f 1a       	sub	r4, r31
 6d0:	51 08       	sbc	r5, r1
 6d2:	41 14       	cp	r4, r1
 6d4:	51 04       	cpc	r5, r1
 6d6:	71 f7       	brne	.-36     	; 0x6b4 <vfprintf+0x19c>
 6d8:	ed c0       	rjmp	.+474    	; 0x8b4 <vfprintf+0x39c>
 6da:	84 36       	cpi	r24, 0x64	; 100
 6dc:	11 f0       	breq	.+4      	; 0x6e2 <vfprintf+0x1ca>
 6de:	89 36       	cpi	r24, 0x69	; 105
 6e0:	41 f5       	brne	.+80     	; 0x732 <vfprintf+0x21a>
 6e2:	f8 01       	movw	r30, r16
 6e4:	27 ff       	sbrs	r18, 7
 6e6:	07 c0       	rjmp	.+14     	; 0x6f6 <vfprintf+0x1de>
 6e8:	60 81       	ld	r22, Z
 6ea:	71 81       	ldd	r23, Z+1	; 0x01
 6ec:	82 81       	ldd	r24, Z+2	; 0x02
 6ee:	93 81       	ldd	r25, Z+3	; 0x03
 6f0:	0c 5f       	subi	r16, 0xFC	; 252
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <vfprintf+0x1ee>
 6f6:	60 81       	ld	r22, Z
 6f8:	71 81       	ldd	r23, Z+1	; 0x01
 6fa:	88 27       	eor	r24, r24
 6fc:	77 fd       	sbrc	r23, 7
 6fe:	80 95       	com	r24
 700:	98 2f       	mov	r25, r24
 702:	0e 5f       	subi	r16, 0xFE	; 254
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	4f e6       	ldi	r20, 0x6F	; 111
 708:	b4 2e       	mov	r11, r20
 70a:	b2 22       	and	r11, r18
 70c:	97 ff       	sbrs	r25, 7
 70e:	09 c0       	rjmp	.+18     	; 0x722 <vfprintf+0x20a>
 710:	90 95       	com	r25
 712:	80 95       	com	r24
 714:	70 95       	com	r23
 716:	61 95       	neg	r22
 718:	7f 4f       	sbci	r23, 0xFF	; 255
 71a:	8f 4f       	sbci	r24, 0xFF	; 255
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	f0 e8       	ldi	r31, 0x80	; 128
 720:	bf 2a       	or	r11, r31
 722:	2a e0       	ldi	r18, 0x0A	; 10
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	a4 01       	movw	r20, r8
 728:	0e 94 aa 04 	call	0x954	; 0x954 <__ultoa_invert>
 72c:	a8 2e       	mov	r10, r24
 72e:	a8 18       	sub	r10, r8
 730:	43 c0       	rjmp	.+134    	; 0x7b8 <vfprintf+0x2a0>
 732:	85 37       	cpi	r24, 0x75	; 117
 734:	31 f4       	brne	.+12     	; 0x742 <vfprintf+0x22a>
 736:	3f ee       	ldi	r19, 0xEF	; 239
 738:	b3 2e       	mov	r11, r19
 73a:	b2 22       	and	r11, r18
 73c:	2a e0       	ldi	r18, 0x0A	; 10
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	24 c0       	rjmp	.+72     	; 0x78a <vfprintf+0x272>
 742:	99 ef       	ldi	r25, 0xF9	; 249
 744:	b9 2e       	mov	r11, r25
 746:	b2 22       	and	r11, r18
 748:	8f 36       	cpi	r24, 0x6F	; 111
 74a:	b9 f0       	breq	.+46     	; 0x77a <vfprintf+0x262>
 74c:	20 f4       	brcc	.+8      	; 0x756 <vfprintf+0x23e>
 74e:	88 35       	cpi	r24, 0x58	; 88
 750:	09 f0       	breq	.+2      	; 0x754 <vfprintf+0x23c>
 752:	b3 c0       	rjmp	.+358    	; 0x8ba <vfprintf+0x3a2>
 754:	0d c0       	rjmp	.+26     	; 0x770 <vfprintf+0x258>
 756:	80 37       	cpi	r24, 0x70	; 112
 758:	21 f0       	breq	.+8      	; 0x762 <vfprintf+0x24a>
 75a:	88 37       	cpi	r24, 0x78	; 120
 75c:	09 f0       	breq	.+2      	; 0x760 <vfprintf+0x248>
 75e:	ad c0       	rjmp	.+346    	; 0x8ba <vfprintf+0x3a2>
 760:	02 c0       	rjmp	.+4      	; 0x766 <vfprintf+0x24e>
 762:	20 e1       	ldi	r18, 0x10	; 16
 764:	b2 2a       	or	r11, r18
 766:	b4 fe       	sbrs	r11, 4
 768:	0b c0       	rjmp	.+22     	; 0x780 <vfprintf+0x268>
 76a:	84 e0       	ldi	r24, 0x04	; 4
 76c:	b8 2a       	or	r11, r24
 76e:	08 c0       	rjmp	.+16     	; 0x780 <vfprintf+0x268>
 770:	24 ff       	sbrs	r18, 4
 772:	09 c0       	rjmp	.+18     	; 0x786 <vfprintf+0x26e>
 774:	e6 e0       	ldi	r30, 0x06	; 6
 776:	be 2a       	or	r11, r30
 778:	06 c0       	rjmp	.+12     	; 0x786 <vfprintf+0x26e>
 77a:	28 e0       	ldi	r18, 0x08	; 8
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	05 c0       	rjmp	.+10     	; 0x78a <vfprintf+0x272>
 780:	20 e1       	ldi	r18, 0x10	; 16
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x272>
 786:	20 e1       	ldi	r18, 0x10	; 16
 788:	32 e0       	ldi	r19, 0x02	; 2
 78a:	f8 01       	movw	r30, r16
 78c:	b7 fe       	sbrs	r11, 7
 78e:	07 c0       	rjmp	.+14     	; 0x79e <vfprintf+0x286>
 790:	60 81       	ld	r22, Z
 792:	71 81       	ldd	r23, Z+1	; 0x01
 794:	82 81       	ldd	r24, Z+2	; 0x02
 796:	93 81       	ldd	r25, Z+3	; 0x03
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <vfprintf+0x292>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 5f       	subi	r16, 0xFE	; 254
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	a4 01       	movw	r20, r8
 7ac:	0e 94 aa 04 	call	0x954	; 0x954 <__ultoa_invert>
 7b0:	a8 2e       	mov	r10, r24
 7b2:	a8 18       	sub	r10, r8
 7b4:	ff e7       	ldi	r31, 0x7F	; 127
 7b6:	bf 22       	and	r11, r31
 7b8:	b6 fe       	sbrs	r11, 6
 7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <vfprintf+0x2ba>
 7bc:	2b 2d       	mov	r18, r11
 7be:	2e 7f       	andi	r18, 0xFE	; 254
 7c0:	a5 14       	cp	r10, r5
 7c2:	50 f4       	brcc	.+20     	; 0x7d8 <vfprintf+0x2c0>
 7c4:	b4 fe       	sbrs	r11, 4
 7c6:	0a c0       	rjmp	.+20     	; 0x7dc <vfprintf+0x2c4>
 7c8:	b2 fc       	sbrc	r11, 2
 7ca:	08 c0       	rjmp	.+16     	; 0x7dc <vfprintf+0x2c4>
 7cc:	2b 2d       	mov	r18, r11
 7ce:	2e 7e       	andi	r18, 0xEE	; 238
 7d0:	05 c0       	rjmp	.+10     	; 0x7dc <vfprintf+0x2c4>
 7d2:	7a 2c       	mov	r7, r10
 7d4:	2b 2d       	mov	r18, r11
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x2c6>
 7d8:	7a 2c       	mov	r7, r10
 7da:	01 c0       	rjmp	.+2      	; 0x7de <vfprintf+0x2c6>
 7dc:	75 2c       	mov	r7, r5
 7de:	24 ff       	sbrs	r18, 4
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <vfprintf+0x2e4>
 7e2:	fe 01       	movw	r30, r28
 7e4:	ea 0d       	add	r30, r10
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 81       	ld	r24, Z
 7ea:	80 33       	cpi	r24, 0x30	; 48
 7ec:	11 f4       	brne	.+4      	; 0x7f2 <vfprintf+0x2da>
 7ee:	29 7e       	andi	r18, 0xE9	; 233
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <vfprintf+0x2ec>
 7f2:	22 ff       	sbrs	r18, 2
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x2ea>
 7f6:	73 94       	inc	r7
 7f8:	73 94       	inc	r7
 7fa:	04 c0       	rjmp	.+8      	; 0x804 <vfprintf+0x2ec>
 7fc:	82 2f       	mov	r24, r18
 7fe:	86 78       	andi	r24, 0x86	; 134
 800:	09 f0       	breq	.+2      	; 0x804 <vfprintf+0x2ec>
 802:	73 94       	inc	r7
 804:	23 fd       	sbrc	r18, 3
 806:	14 c0       	rjmp	.+40     	; 0x830 <vfprintf+0x318>
 808:	20 ff       	sbrs	r18, 0
 80a:	0f c0       	rjmp	.+30     	; 0x82a <vfprintf+0x312>
 80c:	5a 2c       	mov	r5, r10
 80e:	73 14       	cp	r7, r3
 810:	60 f4       	brcc	.+24     	; 0x82a <vfprintf+0x312>
 812:	53 0c       	add	r5, r3
 814:	57 18       	sub	r5, r7
 816:	73 2c       	mov	r7, r3
 818:	08 c0       	rjmp	.+16     	; 0x82a <vfprintf+0x312>
 81a:	b7 01       	movw	r22, r14
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	2c 87       	std	Y+12, r18	; 0x0c
 822:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 826:	73 94       	inc	r7
 828:	2c 85       	ldd	r18, Y+12	; 0x0c
 82a:	73 14       	cp	r7, r3
 82c:	b0 f3       	brcs	.-20     	; 0x81a <vfprintf+0x302>
 82e:	04 c0       	rjmp	.+8      	; 0x838 <vfprintf+0x320>
 830:	73 14       	cp	r7, r3
 832:	10 f4       	brcc	.+4      	; 0x838 <vfprintf+0x320>
 834:	37 18       	sub	r3, r7
 836:	01 c0       	rjmp	.+2      	; 0x83a <vfprintf+0x322>
 838:	31 2c       	mov	r3, r1
 83a:	24 ff       	sbrs	r18, 4
 83c:	12 c0       	rjmp	.+36     	; 0x862 <vfprintf+0x34a>
 83e:	b7 01       	movw	r22, r14
 840:	80 e3       	ldi	r24, 0x30	; 48
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	2c 87       	std	Y+12, r18	; 0x0c
 846:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 84a:	2c 85       	ldd	r18, Y+12	; 0x0c
 84c:	22 ff       	sbrs	r18, 2
 84e:	1e c0       	rjmp	.+60     	; 0x88c <vfprintf+0x374>
 850:	21 ff       	sbrs	r18, 1
 852:	03 c0       	rjmp	.+6      	; 0x85a <vfprintf+0x342>
 854:	88 e5       	ldi	r24, 0x58	; 88
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <vfprintf+0x346>
 85a:	88 e7       	ldi	r24, 0x78	; 120
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	b7 01       	movw	r22, r14
 860:	0c c0       	rjmp	.+24     	; 0x87a <vfprintf+0x362>
 862:	82 2f       	mov	r24, r18
 864:	86 78       	andi	r24, 0x86	; 134
 866:	91 f0       	breq	.+36     	; 0x88c <vfprintf+0x374>
 868:	21 fd       	sbrc	r18, 1
 86a:	02 c0       	rjmp	.+4      	; 0x870 <vfprintf+0x358>
 86c:	80 e2       	ldi	r24, 0x20	; 32
 86e:	01 c0       	rjmp	.+2      	; 0x872 <vfprintf+0x35a>
 870:	8b e2       	ldi	r24, 0x2B	; 43
 872:	27 fd       	sbrc	r18, 7
 874:	8d e2       	ldi	r24, 0x2D	; 45
 876:	b7 01       	movw	r22, r14
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 87e:	06 c0       	rjmp	.+12     	; 0x88c <vfprintf+0x374>
 880:	b7 01       	movw	r22, r14
 882:	80 e3       	ldi	r24, 0x30	; 48
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 88a:	5a 94       	dec	r5
 88c:	a5 14       	cp	r10, r5
 88e:	c0 f3       	brcs	.-16     	; 0x880 <vfprintf+0x368>
 890:	aa 94       	dec	r10
 892:	f4 01       	movw	r30, r8
 894:	ea 0d       	add	r30, r10
 896:	f1 1d       	adc	r31, r1
 898:	b7 01       	movw	r22, r14
 89a:	80 81       	ld	r24, Z
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 8a2:	a1 10       	cpse	r10, r1
 8a4:	f5 cf       	rjmp	.-22     	; 0x890 <vfprintf+0x378>
 8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <vfprintf+0x39c>
 8a8:	b7 01       	movw	r22, r14
 8aa:	80 e2       	ldi	r24, 0x20	; 32
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 8b2:	3a 94       	dec	r3
 8b4:	31 10       	cpse	r3, r1
 8b6:	f8 cf       	rjmp	.-16     	; 0x8a8 <vfprintf+0x390>
 8b8:	43 ce       	rjmp	.-890    	; 0x540 <vfprintf+0x28>
 8ba:	f7 01       	movw	r30, r14
 8bc:	26 81       	ldd	r18, Z+6	; 0x06
 8be:	37 81       	ldd	r19, Z+7	; 0x07
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <vfprintf+0x3ae>
 8c2:	2f ef       	ldi	r18, 0xFF	; 255
 8c4:	3f ef       	ldi	r19, 0xFF	; 255
 8c6:	c9 01       	movw	r24, r18
 8c8:	2c 96       	adiw	r28, 0x0c	; 12
 8ca:	e2 e1       	ldi	r30, 0x12	; 18
 8cc:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__epilogue_restores__>

000008d0 <strnlen_P>:
 8d0:	fc 01       	movw	r30, r24
 8d2:	05 90       	lpm	r0, Z+
 8d4:	61 50       	subi	r22, 0x01	; 1
 8d6:	70 40       	sbci	r23, 0x00	; 0
 8d8:	01 10       	cpse	r0, r1
 8da:	d8 f7       	brcc	.-10     	; 0x8d2 <strnlen_P+0x2>
 8dc:	80 95       	com	r24
 8de:	90 95       	com	r25
 8e0:	8e 0f       	add	r24, r30
 8e2:	9f 1f       	adc	r25, r31
 8e4:	08 95       	ret

000008e6 <strnlen>:
 8e6:	fc 01       	movw	r30, r24
 8e8:	61 50       	subi	r22, 0x01	; 1
 8ea:	70 40       	sbci	r23, 0x00	; 0
 8ec:	01 90       	ld	r0, Z+
 8ee:	01 10       	cpse	r0, r1
 8f0:	d8 f7       	brcc	.-10     	; 0x8e8 <strnlen+0x2>
 8f2:	80 95       	com	r24
 8f4:	90 95       	com	r25
 8f6:	8e 0f       	add	r24, r30
 8f8:	9f 1f       	adc	r25, r31
 8fa:	08 95       	ret

000008fc <fputc>:
 8fc:	0f 93       	push	r16
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	8c 01       	movw	r16, r24
 906:	eb 01       	movw	r28, r22
 908:	8b 81       	ldd	r24, Y+3	; 0x03
 90a:	81 fd       	sbrc	r24, 1
 90c:	03 c0       	rjmp	.+6      	; 0x914 <__stack+0x15>
 90e:	0f ef       	ldi	r16, 0xFF	; 255
 910:	1f ef       	ldi	r17, 0xFF	; 255
 912:	1a c0       	rjmp	.+52     	; 0x948 <__stack+0x49>
 914:	82 ff       	sbrs	r24, 2
 916:	0d c0       	rjmp	.+26     	; 0x932 <__stack+0x33>
 918:	2e 81       	ldd	r18, Y+6	; 0x06
 91a:	3f 81       	ldd	r19, Y+7	; 0x07
 91c:	8c 81       	ldd	r24, Y+4	; 0x04
 91e:	9d 81       	ldd	r25, Y+5	; 0x05
 920:	28 17       	cp	r18, r24
 922:	39 07       	cpc	r19, r25
 924:	64 f4       	brge	.+24     	; 0x93e <__stack+0x3f>
 926:	e8 81       	ld	r30, Y
 928:	f9 81       	ldd	r31, Y+1	; 0x01
 92a:	01 93       	st	Z+, r16
 92c:	f9 83       	std	Y+1, r31	; 0x01
 92e:	e8 83       	st	Y, r30
 930:	06 c0       	rjmp	.+12     	; 0x93e <__stack+0x3f>
 932:	e8 85       	ldd	r30, Y+8	; 0x08
 934:	f9 85       	ldd	r31, Y+9	; 0x09
 936:	80 2f       	mov	r24, r16
 938:	09 95       	icall
 93a:	89 2b       	or	r24, r25
 93c:	41 f7       	brne	.-48     	; 0x90e <__stack+0xf>
 93e:	8e 81       	ldd	r24, Y+6	; 0x06
 940:	9f 81       	ldd	r25, Y+7	; 0x07
 942:	01 96       	adiw	r24, 0x01	; 1
 944:	9f 83       	std	Y+7, r25	; 0x07
 946:	8e 83       	std	Y+6, r24	; 0x06
 948:	c8 01       	movw	r24, r16
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	0f 91       	pop	r16
 952:	08 95       	ret

00000954 <__ultoa_invert>:
 954:	fa 01       	movw	r30, r20
 956:	aa 27       	eor	r26, r26
 958:	28 30       	cpi	r18, 0x08	; 8
 95a:	51 f1       	breq	.+84     	; 0x9b0 <__ultoa_invert+0x5c>
 95c:	20 31       	cpi	r18, 0x10	; 16
 95e:	81 f1       	breq	.+96     	; 0x9c0 <__ultoa_invert+0x6c>
 960:	e8 94       	clt
 962:	6f 93       	push	r22
 964:	6e 7f       	andi	r22, 0xFE	; 254
 966:	6e 5f       	subi	r22, 0xFE	; 254
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	8f 4f       	sbci	r24, 0xFF	; 255
 96c:	9f 4f       	sbci	r25, 0xFF	; 255
 96e:	af 4f       	sbci	r26, 0xFF	; 255
 970:	b1 e0       	ldi	r27, 0x01	; 1
 972:	3e d0       	rcall	.+124    	; 0x9f0 <__ultoa_invert+0x9c>
 974:	b4 e0       	ldi	r27, 0x04	; 4
 976:	3c d0       	rcall	.+120    	; 0x9f0 <__ultoa_invert+0x9c>
 978:	67 0f       	add	r22, r23
 97a:	78 1f       	adc	r23, r24
 97c:	89 1f       	adc	r24, r25
 97e:	9a 1f       	adc	r25, r26
 980:	a1 1d       	adc	r26, r1
 982:	68 0f       	add	r22, r24
 984:	79 1f       	adc	r23, r25
 986:	8a 1f       	adc	r24, r26
 988:	91 1d       	adc	r25, r1
 98a:	a1 1d       	adc	r26, r1
 98c:	6a 0f       	add	r22, r26
 98e:	71 1d       	adc	r23, r1
 990:	81 1d       	adc	r24, r1
 992:	91 1d       	adc	r25, r1
 994:	a1 1d       	adc	r26, r1
 996:	20 d0       	rcall	.+64     	; 0x9d8 <__ultoa_invert+0x84>
 998:	09 f4       	brne	.+2      	; 0x99c <__ultoa_invert+0x48>
 99a:	68 94       	set
 99c:	3f 91       	pop	r19
 99e:	2a e0       	ldi	r18, 0x0A	; 10
 9a0:	26 9f       	mul	r18, r22
 9a2:	11 24       	eor	r1, r1
 9a4:	30 19       	sub	r19, r0
 9a6:	30 5d       	subi	r19, 0xD0	; 208
 9a8:	31 93       	st	Z+, r19
 9aa:	de f6       	brtc	.-74     	; 0x962 <__ultoa_invert+0xe>
 9ac:	cf 01       	movw	r24, r30
 9ae:	08 95       	ret
 9b0:	46 2f       	mov	r20, r22
 9b2:	47 70       	andi	r20, 0x07	; 7
 9b4:	40 5d       	subi	r20, 0xD0	; 208
 9b6:	41 93       	st	Z+, r20
 9b8:	b3 e0       	ldi	r27, 0x03	; 3
 9ba:	0f d0       	rcall	.+30     	; 0x9da <__ultoa_invert+0x86>
 9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__ultoa_invert+0x5c>
 9be:	f6 cf       	rjmp	.-20     	; 0x9ac <__ultoa_invert+0x58>
 9c0:	46 2f       	mov	r20, r22
 9c2:	4f 70       	andi	r20, 0x0F	; 15
 9c4:	40 5d       	subi	r20, 0xD0	; 208
 9c6:	4a 33       	cpi	r20, 0x3A	; 58
 9c8:	18 f0       	brcs	.+6      	; 0x9d0 <__ultoa_invert+0x7c>
 9ca:	49 5d       	subi	r20, 0xD9	; 217
 9cc:	31 fd       	sbrc	r19, 1
 9ce:	40 52       	subi	r20, 0x20	; 32
 9d0:	41 93       	st	Z+, r20
 9d2:	02 d0       	rcall	.+4      	; 0x9d8 <__ultoa_invert+0x84>
 9d4:	a9 f7       	brne	.-22     	; 0x9c0 <__ultoa_invert+0x6c>
 9d6:	ea cf       	rjmp	.-44     	; 0x9ac <__ultoa_invert+0x58>
 9d8:	b4 e0       	ldi	r27, 0x04	; 4
 9da:	a6 95       	lsr	r26
 9dc:	97 95       	ror	r25
 9de:	87 95       	ror	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	ba 95       	dec	r27
 9e6:	c9 f7       	brne	.-14     	; 0x9da <__ultoa_invert+0x86>
 9e8:	00 97       	sbiw	r24, 0x00	; 0
 9ea:	61 05       	cpc	r22, r1
 9ec:	71 05       	cpc	r23, r1
 9ee:	08 95       	ret
 9f0:	9b 01       	movw	r18, r22
 9f2:	ac 01       	movw	r20, r24
 9f4:	0a 2e       	mov	r0, r26
 9f6:	06 94       	lsr	r0
 9f8:	57 95       	ror	r21
 9fa:	47 95       	ror	r20
 9fc:	37 95       	ror	r19
 9fe:	27 95       	ror	r18
 a00:	ba 95       	dec	r27
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <__ultoa_invert+0xa2>
 a04:	62 0f       	add	r22, r18
 a06:	73 1f       	adc	r23, r19
 a08:	84 1f       	adc	r24, r20
 a0a:	95 1f       	adc	r25, r21
 a0c:	a0 1d       	adc	r26, r0
 a0e:	08 95       	ret

00000a10 <__prologue_saves__>:
 a10:	2f 92       	push	r2
 a12:	3f 92       	push	r3
 a14:	4f 92       	push	r4
 a16:	5f 92       	push	r5
 a18:	6f 92       	push	r6
 a1a:	7f 92       	push	r7
 a1c:	8f 92       	push	r8
 a1e:	9f 92       	push	r9
 a20:	af 92       	push	r10
 a22:	bf 92       	push	r11
 a24:	cf 92       	push	r12
 a26:	df 92       	push	r13
 a28:	ef 92       	push	r14
 a2a:	ff 92       	push	r15
 a2c:	0f 93       	push	r16
 a2e:	1f 93       	push	r17
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	ca 1b       	sub	r28, r26
 a3a:	db 0b       	sbc	r29, r27
 a3c:	0f b6       	in	r0, 0x3f	; 63
 a3e:	f8 94       	cli
 a40:	de bf       	out	0x3e, r29	; 62
 a42:	0f be       	out	0x3f, r0	; 63
 a44:	cd bf       	out	0x3d, r28	; 61
 a46:	09 94       	ijmp

00000a48 <__epilogue_restores__>:
 a48:	2a 88       	ldd	r2, Y+18	; 0x12
 a4a:	39 88       	ldd	r3, Y+17	; 0x11
 a4c:	48 88       	ldd	r4, Y+16	; 0x10
 a4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a50:	6e 84       	ldd	r6, Y+14	; 0x0e
 a52:	7d 84       	ldd	r7, Y+13	; 0x0d
 a54:	8c 84       	ldd	r8, Y+12	; 0x0c
 a56:	9b 84       	ldd	r9, Y+11	; 0x0b
 a58:	aa 84       	ldd	r10, Y+10	; 0x0a
 a5a:	b9 84       	ldd	r11, Y+9	; 0x09
 a5c:	c8 84       	ldd	r12, Y+8	; 0x08
 a5e:	df 80       	ldd	r13, Y+7	; 0x07
 a60:	ee 80       	ldd	r14, Y+6	; 0x06
 a62:	fd 80       	ldd	r15, Y+5	; 0x05
 a64:	0c 81       	ldd	r16, Y+4	; 0x04
 a66:	1b 81       	ldd	r17, Y+3	; 0x03
 a68:	aa 81       	ldd	r26, Y+2	; 0x02
 a6a:	b9 81       	ldd	r27, Y+1	; 0x01
 a6c:	ce 0f       	add	r28, r30
 a6e:	d1 1d       	adc	r29, r1
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	de bf       	out	0x3e, r29	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	cd bf       	out	0x3d, r28	; 61
 a7a:	ed 01       	movw	r28, r26
 a7c:	08 95       	ret

00000a7e <_exit>:
 a7e:	f8 94       	cli

00000a80 <__stop_program>:
 a80:	ff cf       	rjmp	.-2      	; 0xa80 <__stop_program>
